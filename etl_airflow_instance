from airflow import DAG
from datetime import timedelta
from airflow.utils.dates import days_ago
from airflow.operators.python import PythonOperator
from airflow.providers.sqlite.operators.sqlite import SqliteOperator
from airflow.providers.sqlite.hooks.sqlite import SqliteHook
from datetime import datetime

import pandas as pd
import sqlite3
import requests
import io

CONN = sqlite3.connect('/tmp/sqlite_default.db')


# Создаем даг который создаст таблицу, запускаем один раз
dag_create_table= DAG(
    dag_id='dag_create_table',
    schedule_interval='@once',
    start_date=datetime(2022, 1, 26),
)

# Задача для создания таблицы в sqlite базе данных
create_table_data = SqliteOperator(
    task_id='create_table_data',
    sql="""CREATE TABLE join_data(
      currency TEXT, 
      value INTEGER, 
      date DATE, 
      rate FLOAT
      )
    """,
    dag=dag_create_table,
)
# Даг который скачивает и объединяет данные
dag = DAG(
          dag_id='dag', 
          start_date=datetime(2021, 1, 1),
          end_date=datetime(2021, 1, 4), 
          max_active_runs=1)

def extract_currency(date, **kwargs):
  import requests
  url = 'https://api.exchangerate.host/timeseries?start_date='+str(date)+'&end_date='+str(date)+'&base=EUR&symbols=USD&format=json'
  response = requests.get(url)
  data = response.json()
  extract_value = list(data['rates'][str(date)].values())[0]
  data['rate'] =  float(extract_value)
  kwargs['ti'].xcom_push(key='return_value', value=data['rate'])

def insert_to_db(data, table_name, conn):
  data.to_sql(table_name, conn, if_exists='append', index=False)

def extract_data(date, conn):
  url = f'https://raw.githubusercontent.com/dm-novikov/stepik_airflow_course/main/data_new/{date}.csv'
  data = pd.read_csv(url,index_col=False)

  insert_to_db(data, 'data', conn)


read_csv_file_1 = PythonOperator(task_id='read_currency', 
                      python_callable=extract_currency,
                      op_kwargs={'date': '{{ ds }}'}, 
                      dag=dag
                      )

  
read_csv_file_2 = PythonOperator(task_id='read_data', 
                      python_callable=extract_data,
                      op_kwargs={'date': '{{ ds }}', 'conn': CONN},
                      dag=dag
                      )


join_data = SqliteOperator(
    task_id='join_data',
    sql=""" insert into join_data
            select
            d.currency,
            d.value,
            d.date,
            """ + "{{ti.xcom_pull(key='return_value')}}" + """ as rate
            from data d
            where d.date = '{{ ds }}';""",
    dag=dag
    )

[read_csv_file_1, read_csv_file_2] >> join_data
